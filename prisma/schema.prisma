datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  }

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  password      String
  phoneNumber   String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cartItems CartItem[]
  role         Role    @default(USER) // user, admin, etc.
  verified     Boolean   @default(false)
  privacyAccepted Boolean   @default(false)
  markettingAccepted Boolean   @default(false)
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}
enum Role {
  USER
  ADMIN
}

model Product {
  id            String    @id   @default(auto())  @map("_id")  @db.ObjectId
  name          String
  price         Int
  stock         Int
  description   String 
  discount      Int
  image         String 
  thumbNails    String[]
  cartItems     CartItem[]
  category     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CartItem {
  id            String    @id   @default(auto())  @map("_id")  @db.ObjectId
  productId     String    @db.ObjectId
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique @db.ObjectId
  quantity      Int       @default(1)
}